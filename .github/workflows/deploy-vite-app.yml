name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# 並列ビルドを防止
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      # pnpmキャッシュをより効果的に活用
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "store-path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store-path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # リポジトリ名から動的にBASE_PATHを設定
      - name: Extract repository name
        id: repo-name
        run: |
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          echo "name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "リポジトリ名 '$REPO_NAME' からベースパスを設定: /$REPO_NAME/"

      # 型チェック
      - name: Run type check
        run: pnpm typecheck || echo "::warning::Type check issues found, but continuing build"

      - name: Build
        env:
          # Google API関連設定
          VITE_GOOGLE_API_KEY: ${{ secrets.VITE_GOOGLE_API_KEY }}
          VITE_GOOGLE_MAPS_MAP_ID: ${{ secrets.VITE_GOOGLE_MAPS_MAP_ID }}
          VITE_GOOGLE_SPREADSHEET_ID: ${{ secrets.VITE_GOOGLE_SPREADSHEET_ID }}
          
          # EmailJS関連設定
          VITE_EMAILJS_SERVICE_ID: ${{ secrets.VITE_EMAILJS_SERVICE_ID }}
          VITE_EMAILJS_TEMPLATE_ID: ${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}
          VITE_EMAILJS_PUBLIC_KEY: ${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
          
          # PWA設定
          VITE_APP_NAME: '佐渡で食えっちゃ'
          VITE_APP_SHORT_NAME: '食えっちゃ'
          VITE_APP_DESCRIPTION: '佐渡島内の飲食店、駐車場、公共トイレの位置情報を網羅。快適な佐渡の旅をサポートします。'
          
          # GitHub Pages ベースパス - リポジトリ名から動的に設定
          BASE_PATH: /${{ steps.repo-name.outputs.name }}/
          
          # 本番環境であることを明示
          NODE_ENV: production
        run: pnpm build

      # ビルド結果の検証（任意のファイルが存在することを確認）
      - name: Verify build output
        run: |
          if [ ! -f "./dist/index.html" ]; then
            echo "::error::Build failed - index.html not found in dist directory"
            exit 1
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          
      # ビルド成果物のサイズ確認（参考値）
      - name: Check build size
        run: |
          BUILD_SIZE=$(du -sh ./dist | cut -f1)
          echo "Build size: $BUILD_SIZE"
          echo "build-size=$BUILD_SIZE" >> $GITHUB_OUTPUT
        id: build-size

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      # デプロイ成功通知
      - name: Deployment success summary
        if: success()
        run: |
          echo "✅ デプロイ成功！"
          echo "📊 デプロイURL: ${{ steps.deployment.outputs.page_url }}"
          echo "🕒 デプロイ時刻: $(date)"