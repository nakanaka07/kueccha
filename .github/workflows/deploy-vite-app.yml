name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境'
        required: true
        default: 'github-pages'
        type: choice
        options: [github-pages, staging]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  BASE_PATH: '/kueccha/'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment variables
        run: |
          cat << EOF > .env
          VITE_GOOGLE_API_KEY=${{ secrets.VITE_GOOGLE_API_KEY }}
          VITE_GOOGLE_MAPS_MAP_ID=${{ secrets.VITE_GOOGLE_MAPS_MAP_ID }}
          VITE_GOOGLE_SPREADSHEET_ID=${{ secrets.VITE_GOOGLE_SPREADSHEET_ID }}
          VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}
          VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}
          VITE_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
          EOF

          echo "環境変数ファイルを作成しました"

      - name: Validate environment variables
        run: pnpm run check:env

      - name: Generate PWA assets
        run: pnpm run generate:pwa-assets

      - name: Build application with GitHub Pages configuration
        run: pnpm run build:pages
        env:
          NODE_ENV: production
          BASE_PATH: ${{ env.BASE_PATH }}

      - name: Optimize assets
        run: pnpm run optimize

      - name: Verify PWA configuration
        run: |
          if [ -f "dist/manifest.json" ]; then
            echo "✓ PWA manifest verified in dist/"
          else
            echo "PWA manifest missing, copying from project root"
            cp manifest.json ./dist/ || true
          fi

          if [ -f "dist/service-worker.js" ] || [ -f "dist/sw.js" ]; then
            echo "✓ Service Worker verified in build output"
          else
            echo "⚠️ Warning: Service Worker not found in build output"
          fi

          echo "Checking for critical assets:"
          ls -la dist

      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
          retention-days: 7

  deploy:
    needs: build
    environment:
      name: ${{ github.event.inputs.environment || 'github-pages' }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000

      - name: Verify deployment
        run: |
          DEPLOY_URL="${{ steps.deployment.outputs.page_url }}"
          echo "✓ デプロイ完了: $DEPLOY_URL"

          # 基本的なデプロイ健全性チェック
          if curl -sSf "$DEPLOY_URL" > /dev/null; then
            echo "✓ デプロイサイトへのアクセス確認成功"
          else
            echo "❌ デプロイサイトへのアクセス失敗"
            exit 1
          fi

          echo "✓ GitHub Pagesへのデプロイが正常に完了しました"
