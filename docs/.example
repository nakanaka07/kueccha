## 汎用的な最適化プロンプト

### 1. パフォーマンス分析プロンプト
```
プロジェクトのパフォーマンス分析を行い、主要な問題点を特定してください。特に[焦点領域]の初期表示速度と[具体的機能]の最適化に焦点を当て、[デプロイ環境]での動作を前提とした改善点を提案してください。
```

### 2. 状態管理最適化プロンプト
```
[ファイル名]の状態管理実装を最適化してください。特にセレクタの最適化とイミュータブルな状態更新に注目し、不要な再レンダリングを削減する方法を提案してください。デバッグツールと連携した状態追跡の設定も含めてください。
```

### 3. データフェッチング最適化プロンプト
```
[ファイル名]のデータフェッチング処理をモダンな手法に基づいて改善してください。[デプロイ環境]の特性を考慮し、効率的なキャッシュ戦略と楽観的UI更新の実装方法を提案してください。
```

### 4. コンポーネント再レンダリング最適化プロンプト
```
[コンポーネント名]での不要な再レンダリングを検出し、メモ化戦略を使って最適化してください。関連コンポーネントとの依存関係も考慮した上で、レンダリング回数を最小限に抑える実装方法を提案してください。
```

### 5. エラーハンドリング強化プロンプト
```
[ファイル名]のエラーハンドリングを強化してください。特に[特定環境]での失敗に対する段階的な回復戦略を実装し、ユーザーには適切なフォールバックUIを表示しながらエラー情報を収集する方法を提案してください。
```

### 6. オフラインサポート実装プロンプト
```
[デプロイ環境]で動作する効果的なオフラインサポート機能を設計・実装してください。ローカルストレージまたはIndexedDBを使ったデータのキャッシュ方法とオフライン状態の視覚的表示の実装方法を具体的に説明してください。
```

### 7. CSS最適化プロンプト
```
[コンポーネント名]のスタイリングを最適化してください。[使用しているCSSフレームワーク]の特性を活かしながら、パフォーマンスと保守性の両方を考慮した実装方法を提案してください。特にモバイルデバイスでのレンダリング速度向上に焦点を当ててください。
```

### 8. ビルド設定最適化プロンプト
```
[ビルド設定ファイル]を最適化し、[デプロイ環境]向けの効率的なビルド設定を提案してください。コード分割、バンドルサイズ削減、開発環境と本番環境の明確な区別など、具体的な改善点を示してください。
```

### 9. パフォーマンス計測実装プロンプト
```
[ファイル名]にパフォーマンス計測ユーティリティを組み込む方法を提案してください。[測定したい処理]の実行時間を正確に測定し、結果を構造化してログに記録する実装方法を具体的に説明してください。
```

### 10. 包括的最適化プロンプト
```
以下のファイルを対象に包括的な最適化を行ってください：
1. [ファイル名1]
2. [ファイル名2]
3. [ファイル名3]

特に以下の点に注目してください：
1. 不要な再レンダリングの防止
2. メモ化の適切な使用
3. データフローの最適化
4. エラーハンドリングの強化

各ファイル間の依存関係を考慮した最適化アプローチを説明し、実装方法と効果測定方法を提案してください。
```

### 11. イテレーティブ最適化アプローチプロンプト
```
以下の最適化ステップを順番に実施し、各ステップごとに改善効果を評価してください：

1. [最適化ステップ1]
2. [最適化ステップ2]
3. [最適化ステップ3]

各ステップの効果測定方法と、次のイテレーションで取り組むべき優先課題の特定方法を提案してください。[実運用環境]での実際のユーザー体験に基づいた最適化戦略の調整方法も含めてください。
```

これらのプロンプトは、[ ] で囲まれた部分を具体的なプロジェクトの詳細に置き換えることで、さまざまなプロジェクトの最適化タスクに適用できます。必要に応じて内容を調整してご使用ください。